<application>
  <component name="AppStorage">
    <histories>
      <item value="The effect of {@code @Builder} is that an inner class is generated named &lt;code&gt;&lt;strong&gt;T&lt;strong&gt;Builder&lt;code&gt;, with a private constructor. Instances of &lt;code&gt;&lt;strong&gt;T&lt;strong&gt;Builder&lt;code&gt; are made with the method named {@code builder()} which is also generated for you in the class itself (not in the builder class)." />
      <item value="If a member is annotated, it must be either a constructor or a method. If a class is annotated, then a package-private constructor is generated with all fields as arguments (as if {@code @AllArgsConstructor(access = AccessLevel.PACKAGE)} is present on the class), and it is as if this constructor has been annotated with {@code @Builder} instead. Note that this constructor is only generated if you haven't written any constructors and also haven't added any explicit {@code @XArgsConstructor} annotations. In those cases, lombok will assume an all-args constructor is present and generate code that uses it; this means you'd get a compiler error if this constructor is not present." />
      <item value="Ambiguous" />
      <item value="Unsatisfied Dependency Exception" />
      <item value="销毁" />
      <item value="Type-safe alternative to {@link basePackages} for specifying the packages to scan for annotated components. The package of each class specified will be scanned. &lt;p&gt;Consider creating a special no-op marker class or interface in each package that serves no purpose other than being referenced by this attribute." />
      <item value="{@link Conditional @Conditional} that only matches when no beans meeting the specified requirements are already contained in the {@link BeanFactory}. None of the requirements must be met for the condition to match and the requirements do not have to be met by the same bean." />
      <item value="join" />
      <item value="The default value is &amp;lt;code&amp;gt;..pom.xml&amp;lt;code&amp;gt;." />
      <item value="&lt;p&gt;Both Spring Web MVC and Spring WebFlux support this annotation through the {@code RequestMappingHandlerMapping} in their respective modules. The values from each type and method level pair of annotations are added to a {@link CorsConfiguration} and then default values are applied via {@link CorsConfigurationapplyPermitDefaultValues()}." />
      <item value="&lt;p&gt;If {@link WebMvcConfigurer} does not expose some more advanced setting that needs to be configured consider removing the {@code @EnableWebMvc} annotation and extending directly from {@link WebMvcConfigurationSupport} or {@link DelegatingWebMvcConfiguration}, e.g.:" />
      <item value="&lt;p&gt;&lt;strong&gt;Note:&lt;strong&gt; only one {@code @Configuration} class may have the {@code @EnableWebMvc} annotation to import the Spring Web MVC configuration. There can however be multiple {@code @Configuration} classes implementing {@code WebMvcConfigurer} in order to customize the provided configuration." />
      <item value="Adding this annotation to an {@code @Configuration} class imports the Spring MVC configuration from {@link WebMvcConfigurationSupport}, e.g.:" />
      <item value="This is the main class providing the configuration behind the MVC Java config. It is typically imported by adding {@link EnableWebMvc @EnableWebMvc} to an application {@link Configuration @Configuration} class. An alternative more advanced option is to extend directly from this class and override methods as necessary, remembering to add {@link Configuration @Configuration} to the subclass and {@link Bean @Bean} to overridden {@link Bean @Bean} methods. For more details see the javadoc of {@link EnableWebMvc @EnableWebMvc}." />
      <item value="This is the main class providing the configuration behind the MVC Java config. It is typically imported by adding {@link EnableWebMvc @EnableWebMvc} to an application {@link Configuration @Configuration} class. An alternative more advanced option is to extend directly from this class and override methods as necessary, remembering to add {@link Configuration @Configuration} to the subclass and {@link Bean @Bean} to overridden {@link Bean @Bean} methods. For more details see the javadoc of {@link EnableWebMvc @EnableWebMvc" />
      <item value="Indicates that an annotation type is automatically inherited. If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation" />
      <item value="Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to {@code execute} will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using {@link ThreadPoolExecutor} constructors" />
      <item value="equal" />
      <item value="equals" />
      <item value="comply" />
      <item value="now comply with the specification&lt;/a&gt; and interpret correctly UTF-8 special * characters without requiring a {@code charset=UTF-8} parameter" />
      <item value="note the underscore after {@code onConstructor" />
      <item value="The syntax for this feature depends on JDK version (nothing we can do about that; it's to work around javac bugs" />
      <item value="Any annotations listed here are put on the generated constructor" />
      <item value="The bin count threshold for using a tree rather than list for a bin. Bins are converted to trees when adding an element to a bin with at least this many nodes. The value must be greater than 2 and should be at least 8 to mesh with assumptions in tree removal about conversion back to plain bins upon shrinkage." />
      <item value="* Rounding mode to round towards the {@literal &quot;nearest neighbor&quot;} * unless both neighbors are equidistant, in which case, round * towards the even neighbor. Behaves as for * {@code RoundingMode.HALF_UP} if the digit to the left of the * discarded fraction is odd; behaves as for * {@code RoundingMode.HALF_DOWN} if it's even. Note that this * is the rounding mode that statistically minimizes cumulative * error when applied repeatedly over a sequence of calculations. * It is sometimes known as {@literal &quot;Banker's rounding,&quot;} and is * chiefly used in the USA. This rounding mode is analogous to * the rounding policy used for {@code float} and {@code double} * arithmetic in Java." />
      <item value="* When a {@code double} must be used as a source for a * {@code BigDecimal}, note that this constructor provides an * exact conversion; it does not give the same result as * converting the {@code double} to a {@code String} using the * {@link Double#toString(double)} method and then using the * {@link #BigDecimal(String)} constructor. To get that result, * use the {@code static} {@link #valueOf(double)} method." />
      <item value="* The {@code String} constructor, on the other hand, is * perfectly predictable: writing {@code new BigDecimal(&quot;0.1&quot;)} * creates a {@code BigDecimal} which is &lt;i&gt;exactly&lt;/i&gt; equal to * 0.1, as one would expect. Therefore, it is generally * recommended that the {@linkplain #BigDecimal(String) * &lt;tt&gt;String&lt;/tt&gt; constructor} be used in preference to this one." />
      <item value="* This is because 0.1 cannot be represented exactly as a * {@code double} (or, for that matter, as a binary fraction of * any finite length). Thus, the value that is being passed * &lt;i&gt;in&lt;/i&gt; to the constructor is not exactly equal to 0.1, * appearances notwithstanding." />
      <item value="* The results of this constructor can be somewhat unpredictable. * One might assume that writing {@code new BigDecimal(0.1)} in * Java creates a {@code BigDecimal} which is exactly equal to * 0.1 (an unscaled value of 1, with a scale of 1), but it is * actually equal to * 0.1000000000000000055511151231257827021181583404541015625." />
      <item value="* Translates a {@code double} into a {@code BigDecimal} which * is the exact decimal representation of the {@code double}'s * binary floating-point value. The scale of the returned * {@code BigDecimal} is the smallest value such that * &lt;tt&gt;(10&lt;sup&gt;scale&lt;/sup&gt; &amp;times; val)&lt;/tt&gt; is an integer." />
      <item value="* Returns the value associated with {@code key} in this cache, obtaining that value from {@code * loader} if necessary. The method improves upon the conventional &quot;if cached, return; otherwise * create, cache and return&quot; pattern. For further improvements, use {@link LoadingCache} and its * {@link LoadingCache#get(Object) get(K)} method instead of this one." />
      <item value="* If the absolute value of the significand of this BigDecimal is * less than or equal to {@code Long.MAX_VALUE}, the value can be * compactly stored in this field and used in computations." />
      <item value="* The number of decimal digits in this BigDecimal, or 0 if the * number of digits are not known (lookaside information). If * nonzero, the value is guaranteed correct. Use the precision() * method to obtain and set the value if it might be 0. This * field is mutable until set nonzero." />
      <item value="* Set the {@code accessible} flag for this object to * the indicated boolean value. A value of {@code true} indicates that * the reflected object should suppress Java language access * checking when it is used. A value of {@code false} indicates * that the reflected object should enforce Java language access checks." />
      <item value="* &lt;p&gt; The field to be reflected is determined by the algorithm that * follows. Let C be the class or interface represented by this object:" />
      <item value="* Returns a {@code Field} object that reflects the specified public member * field of the class or interface represented by this {@code Class} * object. The {@code name} parameter is a {@code String} specifying the * simple name of the desired field." />
      <item value="* &lt;p&gt; The elements in the returned array are not sorted and are not in any * particular order." />
      <item value="* &lt;p&gt; If this {@code Class} object represents an array type, a primitive * type, or void, then this method returns an array of length 0." />
      <item value="* &lt;p&gt; If this {@code Class} object represents a class or interface with no * declared fields, then this method returns an array of length 0." />
      <item value="* Compares this string to the specified {@code StringBuffer}. The result * is {@code true} if and only if this {@code String} represents the same * sequence of characters as the specified {@code StringBuffer}. This method * synchronizes on the {@code StringBuffer}." />
      <item value="because there was a socket exception raised by this connection" />
      <item value="* &lt;p&gt;By default, this executor won't wait for the termination of tasks at all. * It will either shut down immediately, interrupting ongoing tasks and clearing * the remaining task queue - or, if the * {@link #setWaitForTasksToCompleteOnShutdown &quot;waitForTasksToCompleteOnShutdown&quot;} * flag has been set to {@code true}, it will continue to fully execute all * ongoing tasks as well as all remaining tasks in the queue, in parallel to * the rest of the container shutting down." />
      <item value="* Set the maximum number of seconds that this executor is supposed to block * on shutdown in order to wait for remaining tasks to complete their execution * before the rest of the container continues to shut down. This is particularly * useful if your remaining tasks are likely to need access to other resources * that are also managed by the container." />
      <item value="Perform a shutdown on the underlying ExecutorService" />
      <item value="* &lt;p&gt;Specify &quot;true&quot; for eager shutdown of threads which still actively execute * a {@link Runnable} at the time that the application itself shuts down." />
      <item value="* Set whether this factory is supposed to create daemon threads, * just executing as long as the application itself is running. * &lt;p&gt;Default is &quot;false&quot;: Concrete factories usually support explicit cancelling. * Hence, if the application shuts down, Runnables will by default finish their * execution." />
      <item value="drain" />
      <item value="* Transitions to TERMINATED state if either (SHUTDOWN and pool * and queue empty) or (STOP and pool empty). If otherwise * eligible to terminate but workerCount is nonzero, interrupts an * idle worker to ensure that shutdown signals propagate. This * method must be called following any action that might make * termination possible -- reducing worker count or removing tasks * from the queue during shutdown. The method is non-private to * allow access from ScheduledThreadPoolExecutor." />
      <item value="If you want this executor to block and wait for the * termination of tasks before the rest of the container continues to shut * down" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="93" />
        <entry key="ENGLISH" value="94" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1627887764960" />
  </component>
</application>